-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import LexInstant
import ParInstant
import InterpreterInstant
import PrintInstant
import AbsInstant


import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> FilePath -> IO ()
runFile v f = putStrV v f >> readFile f >>= runInterpreter v


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  -v (files)      Parse content of files verbosely."
    , "  (files)         Silent mode. Parse content of files silently."
    ]
  exitFailure


runInterpreter :: Verbosity -> String -> IO ()
runInterpreter v s = let ts = myLLexer s in case pProgram ts of
  Bad s   -> do putStrV v "\nParse              Failed...\n"
                putStrV v "Tokens:"
                putStrV v $ show ts
                putStrLn s
                exitFailure

  Ok tree -> do putStrV v "\nParse Successful!"
                showTree v tree

                putStrV v "\nProgram result:"

                let res = transProgram tree in
                  case res of
                    Ok r -> putStrLn r
                    _ -> putStrLn "Fail"

                exitSuccess

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= runInterpreter 2
    "-v":fs -> mapM_ (runFile 2) fs
    fs -> mapM_ (runFile 0) fs





